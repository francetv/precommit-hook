#!/usr/bin/env node
var exec = require('child_process').exec,
    spawn = require('child_process').spawn,
    path = require('path'),
    os = require('os'),
    fail = '\x1B[31mfailed!\x1B[39m',
    ok = '\x1B[32mok\x1B[39m',
    notfound = '\x1B[33mn/a\x1B[39m (no script found)';

function getRoot() {
    var path = require('path');
    exec('git rev-parse --show-toplevel', function (err, stdout, stderr) {
        if (err) {
            console.log('failed to find git root');
            process.exit(1);
        }

        var cwd = path.normalize(stdout.trim()),
            config = require(path.join(cwd, 'package.json')),
            myconfig = config.config && config.config.precommit ? config.config.precommit : undefined;

        runJshint(cwd, config, myconfig);
    });
}

function runJshint(cwd, config, myconfig) {
    var cmd;
    var jshintCommand = './node_modules/precommit-hook/node_modules/.bin/jshint';
    var jshint;

    if (myconfig && myconfig.hasOwnProperty('lint')) {
        if (myconfig.lint && myconfig.lint !== true) {
            cmd = myconfig.lint;
        } else if (myconfig.lint === false) {
            return runValidator(cwd, config, myconfig);
        }
    }

    if(os.platform() === 'win32'){
        jshintCommand += '.cmd';
    }
    if (!cmd) cmd = jshintCommand;
    cmd = path.normalize(cmd);

    jshint = spawn(cmd, ['.'], {
            cwd: cwd,
            stdio: 'inherit'
        });

    jshint.on('close', function(code) {
        if(code === 0) {
            console.log('jshint: ' + ok);
            runValidator(cwd, config, myconfig);
        }
        else {
            console.log('jshint: ' + fail);
            process.exit(1);
        }
    });
}

function runValidator(path, config, myconfig) {
    var cmd;
    if (myconfig && myconfig.hasOwnProperty('validate')) {
        if (myconfig.validate && myconfig.validate !== true) {
            cmd = myconfig.validate;
        } else if (myconfig.validate === false) {
            return runTests(path, config, myconfig);
        }
    }
    if (!cmd && config.scripts && config.scripts.validate) cmd = config.scripts.validate;
    if (cmd) {
        exec(cmd, { cwd: path }, function (err, stdout, stderr) {
            if (err) {
                console.log('validation: ' + fail);
                console.log(stdout);
                console.log(stderr);
                process.exit(1);
            } else {
                console.log('validation: ' + ok);
                runTests(path, config, myconfig);
            }
        });
    } else {
        console.log('validation: ' + notfound);
        runTests(path, config, myconfig);
    }
}

function runTests(cwd, config, myconfig) {
    var path = require('path');
    var fs = require('fs');
    var cmd;
    if (myconfig && myconfig.hasOwnProperty('test')) {
        if (myconfig.test && myconfig.test !== true) {
            cmd = myconfig.test;
        } else if (myconfig.test === false) {
            return process.exit(0);
        }
    }
    if (!cmd && config.scripts && config.scripts.test) cmd = config.scripts.test;
    if (cmd) {
        var toSpawn = cmd.split(' ')[0];
        var spawnArgs = cmd.split(' ').slice(1);
        if(os.platform() === 'win32'  || os.platform() === 'darwin') {

            if(os.platform() === 'win32') {
                toSpawn = toSpawn + '.cmd';
            }
            
            if (fs.existsSync(path.join(cwd, 'node_modules/.bin', toSpawn))) {
                toSpawn = path.normalize('./node_modules/.bin/' + toSpawn);
            }
        }

        var tests = spawn(toSpawn, spawnArgs, {
            cwd: cwd,
            stdio: 'inherit'
        });

        tests.on('close', function(code) {
            if(code === 0) {
                console.log('tests: ' + ok);
            }
            else {
                console.log('tests: ' + fail);
                process.exit(1);
            }
        });
    } else {
        console.log('tests: ' + notfound);
        process.exit(0);
    }
}

console.log('running pre-commit checks...');
getRoot();
